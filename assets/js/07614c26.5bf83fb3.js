"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[269],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return f}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),g=u(r),f=o,m=g["".concat(c,".").concat(f)]||g[f]||p[f]||l;return r?t.createElement(m,i(i({ref:n},s),{},{components:r})):t.createElement(m,i({ref:n},s))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=g;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var u=2;u<l;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8887:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return g}});var t=r(3117),o=r(102),l=(r(7294),r(3905)),i=["components"],a={},c="Log",u={unversionedId:"functions/log",id:"functions/log",title:"Log",description:"Pine has a built-in logger which support different log levels. You can configure this or set process.env.LOG_LEVEL",source:"@site/docs/functions/log.md",sourceDirName:"functions",slug:"/functions/log",permalink:"/docs/functions/log",editUrl:"https://github.com/pinefile/pinefile.github.io/edit/develop/docs/functions/log.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Configure",permalink:"/docs/functions/config"},next:{title:"Parallel",permalink:"/docs/functions/parallel"}},s=[{value:"Info",id:"info",children:[],level:2},{value:"Warning",id:"warning",children:[],level:2},{value:"Error",id:"error",children:[],level:2},{value:"Create logger",id:"create-logger",children:[],level:2},{value:"Configure custom logger",id:"configure-custom-logger",children:[],level:2}],p={toc:s};function g(e){var n=e.components,r=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"log"},"Log"),(0,l.kt)("p",null,"Pine has a built-in logger which support different log levels. You can ",(0,l.kt)("a",{parentName:"p",href:"/docs/functions/config"},"configure")," this or set ",(0,l.kt)("inlineCode",{parentName:"p"},"process.env.LOG_LEVEL")),(0,l.kt)("h2",{id:"info"},"Info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { log } = require("@pinefile/pine");\n\nmodule.exports = {\n  example: () => {\n    log.info("Foo");\n  },\n};\n')),(0,l.kt)("h2",{id:"warning"},"Warning"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { log } = require("@pinefile/pine");\n\nmodule.exports = {\n  example: () => {\n    log.warn("Foo");\n  },\n};\n')),(0,l.kt)("h2",{id:"error"},"Error"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const { log } = require("@pinefile/pine");\n\nmodule.exports = {\n  example: () => {\n    log.error("Foo");\n  },\n};\n')),(0,l.kt)("h2",{id:"create-logger"},"Create logger"),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"createLogger")," you can create your own logger with custom prefix"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { createLogger } = require('@pinefile/pine');\n\nconst log = createLogger({\n  prefix: '[pine]'\n});\n\nmodule.exports = {\n  example: () => {\n    log.info('Foo');\n  },\n};\n")),(0,l.kt)("h2",{id:"configure-custom-logger"},"Configure custom logger"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Since 1.1.0")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"configure")," you can set your custom logger so the core of Pine uses the same one, instead of the built in. To do this you need to follow the simple log api that Pine uses:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const customLogger = {\n  info: (...msg) => console.log(...msg)\n  warn: (...msg) => console.warn(...msg),\n  error: (...msg) => console.error(...msg),\n};\n")),(0,l.kt)("p",null,"With TypeScript you can import and extend the ",(0,l.kt)("inlineCode",{parentName:"p"},"Logger")," class:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { Logger } from '@pinefile/pine';\n\nclass CustomLogger extends Logger {\n  ...\n}\n")),(0,l.kt)("p",null,"And then use it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"configure({\n  logger: customLogger,\n});\n")))}g.isMDXComponent=!0}}]);