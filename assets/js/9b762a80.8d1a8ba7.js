(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[797],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1571:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),s={},i="Split up tasks",l={unversionedId:"advanced/split-up-tasks",id:"advanced/split-up-tasks",isDocsHomePage:!1,title:"Split up tasks",description:"You can split up tasks in more than one file, e.g having all build tasks in one file:",source:"@site/docs/advanced/split-up-tasks.md",sourceDirName:"advanced",slug:"/advanced/split-up-tasks",permalink:"/docs/advanced/split-up-tasks",editUrl:"https://github.com/pinefile/pinefile.github.io/edit/develop/docs/advanced/split-up-tasks.md",version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Runners",permalink:"/docs/advanced/runners"},next:{title:"Transpilers",permalink:"/docs/advanced/transpilers"}},c=[],u={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"split-up-tasks"},"Split up tasks"),(0,o.kt)("p",null,"You can split up tasks in more than one file, e.g having all build tasks in one file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// tasks/build.js\nmodule.exports = {\n  css: () => console.log("build:css"),\n  default: () => console.log("build"),\n};\n\n// pinefile.js\nmodule.exports = {\n  build: require("./tasks/build.js"),\n};\n')),(0,o.kt)("p",null,"Then you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"npx pine build:css")),(0,o.kt)("p",null,"To load and export all tasks automatic you can do it with ",(0,o.kt)("inlineCode",{parentName:"p"},"fs.readFileSync")," or some glob package."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\nconst tasks = fs.readdirSync('./tasks').reduce(\n  (prev, cur) => ({\n    ...prev,\n    [cur.split('.').shift()]: require(`./tasks/${cur}`),\n  }),\n  {}\n);\n\nmodule.exports = tasks;\n")))}p.isMDXComponent=!0}}]);