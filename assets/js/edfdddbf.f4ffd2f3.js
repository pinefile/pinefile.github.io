"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[479],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=c(t),d=l,m=f["".concat(u,".").concat(d)]||f[d]||p[d]||o;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5709:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var r=t(3117),l=t(102),o=(t(7294),t(3905)),a=["components"],i={},u="Parallel",c={unversionedId:"functions/parallel",id:"functions/parallel",title:"Parallel",description:"Run tasks that will be executed simultaneously.",source:"@site/docs/functions/parallel.md",sourceDirName:"functions",slug:"/functions/parallel",permalink:"/docs/functions/parallel",editUrl:"https://github.com/pinefile/pinefile.github.io/edit/develop/docs/functions/parallel.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Log",permalink:"/docs/functions/log"},next:{title:"Run",permalink:"/docs/functions/run"}},s=[{value:"Combined tasks into one",id:"combined-tasks-into-one",children:[],level:2},{value:"Run multiple functions in parallel",id:"run-multiple-functions-in-parallel",children:[],level:2}],p={toc:s};function f(e){var n=e.components,t=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"parallel"},"Parallel"),(0,o.kt)("p",null,"Run tasks that will be executed simultaneously."),(0,o.kt)("h2",{id:"combined-tasks-into-one"},"Combined tasks into one"),(0,o.kt)("p",null,"You can combine tasks into one, e.g have a default task for building everything."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { parallel } = require("@pinefile/pine");\n\nmodule.exports = {\n  example: parallel("line", "build"),\n  lint: () => {},\n  build: () => {},\n};\n')),(0,o.kt)("h2",{id:"run-multiple-functions-in-parallel"},"Run multiple functions in parallel"),(0,o.kt)("p",null,"Support both ",(0,o.kt)("inlineCode",{parentName:"p"},"callback"),"-format and asynchronous functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { log, parallel } = require("@pinefile/pine");\n\nmodule.exports = {\n  example: async () => {\n    const tasks = [\n      (done) => {\n        log.push("callback");\n        done();\n      },\n      async () => {\n        return new Promise((resolve) => {\n          log.info("async");\n          resolve();\n        });\n      },\n    ];\n\n    await parallel(tasks);\n  },\n};\n')))}f.isMDXComponent=!0}}]);